import { HorizontalBox, GridBox, VerticalBox, ScrollView, Switch, DatePickerPopup, Button } from "std-widgets.slint";

struct DateTime {
    day: int,  // [1,31] e N
    month: int, // [1,12] e N
    year: int,
    start: float, // [0.0,23.985] e Q
    end: float, // [0.0,23.985] e Q
}

struct Event {
    date: DateTime,
    name: string,
    desc: string,
    id: int,  // hash(hash(name,desc),date)
}

export component EventRect inherits Rectangle {
    // private property <int> column: index;
    // private property <int> r_row: index;
    in-out property <Event> event;  
    in property <length> column_width;
    in property <length> row_height;
    touch_item := TouchArea {
        private property <length> x_diff:parent.x + self.mouse-x - self.pressed-x;
        private property <length> y_diff:parent.y + self.mouse-y - self.pressed-y;
        moved => {
            // parent.y += self.mouse-y - self.pressed-y;
                            if (y_diff > (row_height * (parent.r_row + 1))) {
                parent.r_row += 0.5;
            } else if (y_diff <= (row_height * (parent.r_row))) {
                parent.r_row -= 0.5;
            }
            if (x_diff > (column_width * (parent.column + 1) - column_width / 2)) {
                // parent.background = Colors.blue;
                                parent.column += 1;
            } else if (x_diff <= (column_width * (parent.column) - column_width / 2)) {
                // parent.background = Colors.red;
                                parent.column -= 1;
            }
            parent.y = row_height * parent.r_row;
            parent.x = column_width * parent.column;
            if (cal.viewport-y + parent.y > (0.7 * cal.height)) {
                cal.viewport-y -= (abs(cal.viewport-y) + cal.height < cal.viewport-height) ? row_height / 2 : 0;
            }
            if (cal.viewport-y + parent.y < (0.3 * cal.height)) {
                cal.viewport-y += cal.viewport-y < 0 ? row_height / 2 : 0;
            }
        }

        mouse-cursor: grab;
    }

    name := Text {
        text: day.name;
        color: black;
    }

    desc := Text {
        text: day.desc;
        color: darkgrey;
        font-size: 60% * name.font-size;
        y: name.y + 20px;
    }

    // padding: 10px;
                    background: touch_item.pressed ? lightgrey : gray;
    border-width: 3px;
    border-color: touch_item.has-hover ? white : black;
    y: 4 * row_height * day.date.start;
    x: column_width * day.date.day;
    height: abs(day.date.end - day.date.start) * 4 * row_height;
    width: column_width;
}

export component WeekView inherits VerticalBox {
    padding: 0;
    spacing: 0;
    in property <bool> edit_mode: false;
    private property <[string]> week_days: ["T", "Mo", "Tu", "We", "Thu", "Fr", "Sa", "Su"];
    // private property <[string]> events: ["Event1", "Event2", "Event3", "Event4", "Event5", "Event6", "Event7"];
    in property <[Event]> events: [
        {
            name: "CoolEvent",
            desc: "lol",
            id: 1,
            date: { day: 1, month: 1, year: 1, start: 5.0, end: 7.0 },
        },
        {
            date: { day: 3, month: 1, year: 1, start: 7.0, end: 10.0 },
            name: "AnotherCoolEvent",
            desc: "rofl",
            id: 2
        },
        {
            date: { day: 4, month: 1, year: 1, start: 2.0, end: 6.0 },
            name: "SoManyEventsWow",
            desc: "uff",
            id: 3
        }
    ];
    private property <float> cur_tim: 13.75;
    in-out property <[int]> times: [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23
    ];
    private property <length> column_width: self.width / (week_days.length - 1 / 2);
    HorizontalBox {
        height: 4%;
        padding: 0;
        spacing: 0;
        for day[idx] in week_days: Rectangle {
            background: idx == 0 ? grey : darkgrey;
            border-color: black;
            border-width: 1px;
            drop-shadow-color: black;
            Text {
                text: day;
                horizontal-alignment: center;
                vertical-alignment: center;
                // width: 13%;
                color: black;
            }

            width: idx == 0 ? column_width / 2 : column_width;
        }
    }

    cal := Flickable {
        private property <length> row_height: self.viewport-height / (4 * times.length);
        // viewport-height: 2000px;
        padding: 0;
        interactive: !edit_mode;
        for line in times: Path {
            x: 0;
            y: (parent.viewport-height * line / 24) - parent.viewport-height / 2;
            stroke: black;
            stroke-width: 2px;
            MoveTo {
                x: 0;
                y: 0;
            }

            LineTo {
                x: 100;
                y: 0;
            }

            Close { }
        }
        for d[idx] in week_days: Path {
            // TODO: -1000px -.-
            x: idx == 0 ? -1000px : (column_width * idx - column_width / 2 - parent.viewport-width / 2);
            y: 0;
            stroke: idx == 0 ? Colors.grey : black;
            stroke-width: 2px;
            MoveTo {
                x: 0;
                y: 0;
            }

            LineTo {
                x: 0;
                y: 100;
            }

            Close { }
        }
        Path {
            x: 0;
            y: (parent.viewport-height * cur_tim / 24) - parent.viewport-height / 2;
            stroke: red;
            stroke-width: 2px;
            MoveTo {
                x: 0;
                y: 0;
            }

            LineTo {
                x: 100;
                y: 0;
            }

            Close { }
        }

        HorizontalBox {
            padding: 0;
            spacing: 0;
            Rectangle {
                background: black;
                opacity: 70%;
                width: column_width / 2;
                for time in times: Text {
                    // width: 100%;
                    // height: 100%;
                    x: 5px;
                    y: parent.height * time / 24;
                    text: time;
                }
            }

            Rectangle {

                for day[index] in events: event := Rectangle {
                    private property <int> column: index;
                    private property <int> r_row: index;
                    touch_item := TouchArea {
                        private property <length> x_diff:parent.x + self.mouse-x - self.pressed-x;
                        private property <length> y_diff:parent.y + self.mouse-y - self.pressed-y;
                        moved => {
                            // parent.y += self.mouse-y - self.pressed-y;
                            if (y_diff > (row_height * (parent.r_row + 1))) {
                                parent.r_row += 0.5;
                            } else if (y_diff <= (row_height * (parent.r_row))) {
                                parent.r_row -= 0.5;
                            }
                            if (x_diff > (column_width * (parent.column + 1) - column_width / 2)) {
                                // parent.background = Colors.blue;
                                parent.column += 1;
                            } else if (x_diff <= (column_width * (parent.column) - column_width / 2)) {
                                // parent.background = Colors.red;
                                parent.column -= 1;
                            }
                            parent.y = row_height * parent.r_row;
                            parent.x = column_width * parent.column;
                            if (cal.viewport-y + parent.y > (0.7 * cal.height)) {
                                cal.viewport-y -= (abs(cal.viewport-y) + cal.height < cal.viewport-height) ? row_height / 2 : 0;
                            }
                            if (cal.viewport-y + parent.y < (0.3 * cal.height)) {
                                cal.viewport-y += cal.viewport-y < 0 ? row_height / 2 : 0;
                            }
                        }

                        mouse-cursor: grab;
                    }

                    name := Text {
                        text: day.name;
                        color: black;
                    }

                    desc := Text {
                        text: day.desc;
                        color: darkgrey;
                        font-size: 60% * name.font-size;
                        y: name.y + 20px;
                    }

                    // padding: 10px;
                    background: touch_item.pressed ? lightgrey : gray;
                    border-width: 3px;
                    border-color: touch_item.has-hover ? white : black;
                    y: 4 * row_height * day.date.start;
                    x: column_width * day.date.day;
                    height: abs(day.date.end - day.date.start) * 4 * row_height;
                    width: column_width;
                }
            }
        }
    }
}

component Footer inherits HorizontalBox {
    padding: 0;
    spacing: 0;
    in property <bool> checked;
    date-picker-button := Button {
        text: @tr("Open Date Picker");

        clicked => {
            date-picker.show();
        }
    }

    date-picker := DatePickerPopup {

        close-on-click: false;

        accepted(date) => {
            date-picker.close();
        }
    }

    Rectangle {
        horizontal-stretch: 100;
    }

    sw := Switch {
        text: "Edit";
        checked: false;
    }

    callback toggled <=> sw.toggled;
}

export component MyApp inherits Window {
    title: "lol";
    max-width: 2560px;
    max-height: 1440px;
    property <bool> edit: false;
    VerticalBox {
        padding: 0;
        spacing: 0;
        wv := WeekView {
            height: 95%;
            edit_mode: edit;
        }

        Footer {
            height: 5%;
            checked: edit;
            toggled => {
                edit = !edit;
            }
        }
    }
}
